{"ast":null,"code":"/**\r\n * Given an object with CSS/SVG transform definitions, return the string value\r\n * for use with the `transform` CSS property or SVG attribute. Note that we\r\n * can't always guarantee the order will match the author's intended order, so\r\n * authors should only use the object notation if they know that their transform\r\n * is commutative or that there is only one.\r\n * @param {Object} obj An object of transform definitions.\r\n * @returns {String} The generated transform string.\r\n */\nexport var toTransformString = function toTransformString(obj) {\n  for (var _len = arguments.length, more = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    more[_key - 1] = arguments[_key];\n  }\n\n  if (more.length > 0) {\n    return more.reduce(function (memo, currentObj) {\n      return [memo, toTransformString(currentObj)].join(\" \");\n    }, toTransformString(obj)).trim();\n  }\n\n  if (obj === undefined || obj === null || typeof obj === \"string\") {\n    return obj;\n  }\n\n  var transforms = [];\n\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      var value = obj[key];\n      transforms.push(\"\".concat(key, \"(\").concat(value, \")\"));\n    }\n  }\n\n  return transforms.join(\" \").trim();\n};\n/**\r\n * Given the name of a color scale, getColorScale will return an array\r\n * of 5 hex string values in that color scale. If no 'name' parameter\r\n * is given, it will return the Victory default grayscale.\r\n * @param {String} name The name of the color scale to return (optional).\r\n * @returns {Array} An array of 5 hex string values composing a color scale.\r\n */\n\nexport function getColorScale(name) {\n  var scales = {\n    grayscale: [\"#cccccc\", \"#969696\", \"#636363\", \"#252525\"],\n    qualitative: [\"#334D5C\", \"#45B29D\", \"#EFC94C\", \"#E27A3F\", \"#DF5A49\", \"#4F7DA1\", \"#55DBC1\", \"#EFDA97\", \"#E2A37F\", \"#DF948A\"],\n    heatmap: [\"#428517\", \"#77D200\", \"#D6D305\", \"#EC8E19\", \"#C92B05\"],\n    warm: [\"#940031\", \"#C43343\", \"#DC5429\", \"#FF821D\", \"#FFAF55\"],\n    cool: [\"#2746B9\", \"#0B69D4\", \"#2794DB\", \"#31BB76\", \"#60E83B\"],\n    red: [\"#FCAE91\", \"#FB6A4A\", \"#DE2D26\", \"#A50F15\", \"#750B0E\"],\n    blue: [\"#002C61\", \"#004B8F\", \"#006BC9\", \"#3795E5\", \"#65B4F4\"],\n    green: [\"#354722\", \"#466631\", \"#649146\", \"#8AB25C\", \"#A9C97E\"]\n  };\n  return name ? scales[name] : scales.grayscale;\n}","map":{"version":3,"names":["toTransformString","obj","_len","arguments","length","more","Array","_key","reduce","memo","currentObj","join","trim","undefined","transforms","key","hasOwnProperty","value","push","concat","getColorScale","name","scales","grayscale","qualitative","heatmap","warm","cool","red","blue","green"],"sources":["C:/Users/gabri/Desktop/dogs-project/node_modules/victory-core/es/victory-util/style.js"],"sourcesContent":["/**\r\n * Given an object with CSS/SVG transform definitions, return the string value\r\n * for use with the `transform` CSS property or SVG attribute. Note that we\r\n * can't always guarantee the order will match the author's intended order, so\r\n * authors should only use the object notation if they know that their transform\r\n * is commutative or that there is only one.\r\n * @param {Object} obj An object of transform definitions.\r\n * @returns {String} The generated transform string.\r\n */\r\nexport var toTransformString = function (obj) {\r\n  for (var _len = arguments.length, more = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n    more[_key - 1] = arguments[_key];\r\n  }\r\n\r\n  if (more.length > 0) {\r\n    return more.reduce(function (memo, currentObj) {\r\n      return [memo, toTransformString(currentObj)].join(\" \");\r\n    }, toTransformString(obj)).trim();\r\n  }\r\n\r\n  if (obj === undefined || obj === null || typeof obj === \"string\") {\r\n    return obj;\r\n  }\r\n\r\n  var transforms = [];\r\n\r\n  for (var key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      var value = obj[key];\r\n      transforms.push(\"\".concat(key, \"(\").concat(value, \")\"));\r\n    }\r\n  }\r\n\r\n  return transforms.join(\" \").trim();\r\n};\r\n/**\r\n * Given the name of a color scale, getColorScale will return an array\r\n * of 5 hex string values in that color scale. If no 'name' parameter\r\n * is given, it will return the Victory default grayscale.\r\n * @param {String} name The name of the color scale to return (optional).\r\n * @returns {Array} An array of 5 hex string values composing a color scale.\r\n */\r\n\r\nexport function getColorScale(name) {\r\n  var scales = {\r\n    grayscale: [\"#cccccc\", \"#969696\", \"#636363\", \"#252525\"],\r\n    qualitative: [\"#334D5C\", \"#45B29D\", \"#EFC94C\", \"#E27A3F\", \"#DF5A49\", \"#4F7DA1\", \"#55DBC1\", \"#EFDA97\", \"#E2A37F\", \"#DF948A\"],\r\n    heatmap: [\"#428517\", \"#77D200\", \"#D6D305\", \"#EC8E19\", \"#C92B05\"],\r\n    warm: [\"#940031\", \"#C43343\", \"#DC5429\", \"#FF821D\", \"#FFAF55\"],\r\n    cool: [\"#2746B9\", \"#0B69D4\", \"#2794DB\", \"#31BB76\", \"#60E83B\"],\r\n    red: [\"#FCAE91\", \"#FB6A4A\", \"#DE2D26\", \"#A50F15\", \"#750B0E\"],\r\n    blue: [\"#002C61\", \"#004B8F\", \"#006BC9\", \"#3795E5\", \"#65B4F4\"],\r\n    green: [\"#354722\", \"#466631\", \"#649146\", \"#8AB25C\", \"#A9C97E\"]\r\n  };\r\n  return name ? scales[name] : scales.grayscale;\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUC,GAAV,EAAe;EAC5C,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAApC,EAAwEK,IAAI,GAAG,CAApF,EAAuFA,IAAI,GAAGL,IAA9F,EAAoGK,IAAI,EAAxG,EAA4G;IAC1GF,IAAI,CAACE,IAAI,GAAG,CAAR,CAAJ,GAAiBJ,SAAS,CAACI,IAAD,CAA1B;EACD;;EAED,IAAIF,IAAI,CAACD,MAAL,GAAc,CAAlB,EAAqB;IACnB,OAAOC,IAAI,CAACG,MAAL,CAAY,UAAUC,IAAV,EAAgBC,UAAhB,EAA4B;MAC7C,OAAO,CAACD,IAAD,EAAOT,iBAAiB,CAACU,UAAD,CAAxB,EAAsCC,IAAtC,CAA2C,GAA3C,CAAP;IACD,CAFM,EAEJX,iBAAiB,CAACC,GAAD,CAFb,EAEoBW,IAFpB,EAAP;EAGD;;EAED,IAAIX,GAAG,KAAKY,SAAR,IAAqBZ,GAAG,KAAK,IAA7B,IAAqC,OAAOA,GAAP,KAAe,QAAxD,EAAkE;IAChE,OAAOA,GAAP;EACD;;EAED,IAAIa,UAAU,GAAG,EAAjB;;EAEA,KAAK,IAAIC,GAAT,IAAgBd,GAAhB,EAAqB;IACnB,IAAIA,GAAG,CAACe,cAAJ,CAAmBD,GAAnB,CAAJ,EAA6B;MAC3B,IAAIE,KAAK,GAAGhB,GAAG,CAACc,GAAD,CAAf;MACAD,UAAU,CAACI,IAAX,CAAgB,GAAGC,MAAH,CAAUJ,GAAV,EAAe,GAAf,EAAoBI,MAApB,CAA2BF,KAA3B,EAAkC,GAAlC,CAAhB;IACD;EACF;;EAED,OAAOH,UAAU,CAACH,IAAX,CAAgB,GAAhB,EAAqBC,IAArB,EAAP;AACD,CAzBM;AA0BP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASQ,aAAT,CAAuBC,IAAvB,EAA6B;EAClC,IAAIC,MAAM,GAAG;IACXC,SAAS,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CADA;IAEXC,WAAW,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,EAAwD,SAAxD,EAAmE,SAAnE,EAA8E,SAA9E,EAAyF,SAAzF,EAAoG,SAApG,CAFF;IAGXC,OAAO,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAHE;IAIXC,IAAI,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAJK;IAKXC,IAAI,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CALK;IAMXC,GAAG,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CANM;IAOXC,IAAI,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAPK;IAQXC,KAAK,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C;EARI,CAAb;EAUA,OAAOT,IAAI,GAAGC,MAAM,CAACD,IAAD,CAAT,GAAkBC,MAAM,CAACC,SAApC;AACD"},"metadata":{},"sourceType":"module"}